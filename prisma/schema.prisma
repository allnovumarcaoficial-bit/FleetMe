generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario modificado
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String? // Campo para la contraseña encriptada
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER) // Nuevo campo de rol

  accounts Account[]
  sessions Session[]
  notifications Notification[]
}

model Notification {
  id        String    @id @default(cuid())
  type      NotificationType
  message   String
  details   String?
  date      DateTime  @default(now())
  read      Boolean   @default(false)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  link      String?   // Opcional: para redirigir al usuario a una página específica

  @@index([userId])
}

enum NotificationType {
  info
  success
  warning
  error
  critical
}

enum Role {
  USER
  ADMIN
}

// Modelos requeridos por NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vehicle {
  id                                 Int      @id @default(autoincrement())
  marca                              String
  modelo                             String
  vin                                String   @unique
  matricula                          String   @unique
  fecha_compra                       DateTime
  fecha_vencimiento_licencia_operativa DateTime
  fecha_vencimiento_circulacion      DateTime
  fecha_vencimiento_somaton          DateTime
  estado                             String
  gps                                Boolean
  listado_municipios                 String   // Stored as JSON string for SQLite
  tipo_vehiculo                      String?
  cantidad_neumaticos                Int?
  tipo_neumaticos                    String?
  capacidad_carga                    String?
  cantidad_conductores               Int?
  ciclo_mantenimiento_km             Int?
  es_electrico                       Boolean?
  cantidad_baterias                  Int?
  tipo_bateria                       String?
  amperage                           Float?
  voltage                            Float?
  tipo_combustible                   String?
  capacidad_tanque                   Float?
  indice_consumo                     Float?
  driverId                           Int?     @unique
  driver                             Driver?  @relation(fields: [driverId], references: [id])
  mantenimientos                     Mantenimiento[]
  servicios                          Servicio[]
  fuelDistributions                  FuelDistribution[]
  destino                            DestinoVehiculo @default(Administrativo)
}

enum DestinoVehiculo {
  Administrativo
  Logistico
  Reparto
}

model Driver {
  id                                Int      @id @default(autoincrement())
  nombre                            String
  licencia                          String   @unique
  fecha_vencimiento_licencia        DateTime
  carnet_peritage                   Boolean
  estado                            String @default("Activo")
  vehicle                           Vehicle? // 1-to-1 relation with Vehicle
}

model Mantenimiento {
  id                        Int      @id @default(autoincrement())
  tipo                      String // "Correctivo" o "Preventivo"
  fecha                     DateTime
  costo                     Float
  descripcion               String
  lista_de_piezas           String // Stored as JSON string
  cambio_de_pieza           Boolean
  estado                    String @default("Pendiente")
  numero_serie_anterior     String?
  numero_serie_nueva        String?
  vehicleId                 Int
  vehicle                   Vehicle  @relation(fields: [vehicleId], references: [id])
}

model FuelCard {
  id                        Int      @id @default(autoincrement())
  numeroDeTarjeta           String   @unique
  tipoDeTarjeta             String
  tipoDeCombustible         String
  precioCombustible         Float
  moneda                    String
  fechaVencimiento          DateTime
  esReservorio              Boolean
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  fuelOperations            FuelOperation[] // Add relation to FuelOperation
}

model Servicio {
  id                  Int      @id @default(autoincrement())
  tipoServicio        String
  fecha               DateTime
  odometroInicial     Int
  odometroFinal       Int?
  cantidadPedidos     Int?
  origen              String?
  destino             String?
  descripcion         String?
  kilometrosRecorridos Int
  estado              String
  vehicleId           Int
  vehicle             Vehicle  @relation(fields: [vehicleId], references: [id])
}

model FuelOperation {
  id                        Int      @id @default(autoincrement())
  tipoOperacion             String // "Carga" or "Consumo"
  fecha                     DateTime
  saldoInicio               Float
  valorOperacionDinero      Float
  valorOperacionLitros      Float
  saldoFinal                Float
  saldoFinalLitros          Float
  fuelCardId                Int
  fuelCard                  FuelCard @relation(fields: [fuelCardId], references: [id])
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  fuelDistributions         FuelDistribution[]
}

model FuelDistribution {
  id              Int           @id @default(autoincrement())
  fuelOperationId Int
  fuelOperation   FuelOperation @relation(fields: [fuelOperationId], references: [id], onDelete: Cascade)
  vehicleId       Int
  vehicle         Vehicle       @relation(fields: [vehicleId], references: [id])
  liters          Float
}
